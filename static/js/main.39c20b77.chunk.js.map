{"version":3,"sources":["Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","text","setText","inCompletedTodos","setInCompletedTodos","isTyping","setIsTyping","isEditing","setIsEditing","onSubmit","list","newTodo","isCompleted","push","onDelete","todo","index","indexOf","splice","inCompleteTodo","className","onClick","value","map","onEdit","style","display","placeholder","onChange","e","target","length","onKeyDown","event","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAiIeA,EA9HJ,WACP,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA+CF,mBAAS,IAAxD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAA+BJ,oBAAS,GAAxC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAiCN,oBAAS,GAA1C,mBAAOO,EAAP,KAAkBC,EAAlB,KAGMC,EAAS,WACX,IAAIC,EAAK,YAAIP,GACTQ,EAAQ,CACRV,KAAKA,EACLW,aAAY,GAGhBF,EAAKG,KAAKF,GACVP,EAAoBM,GACpBR,EAAQ,IACRI,GAAY,GACZE,GAAa,IA0BXM,EAAS,SAACC,GACZ,IAAIL,EAAK,YAAIP,GACPa,EAAQN,EAAKO,QAAQF,GACvBC,GAAS,GACTN,EAAKQ,OAAOF,EAAO,GAEvBZ,EAAoBM,IAGlBS,EAAe,SAACJ,GAClB,OACI,sBAAKK,UAAU,iBAAf,UACI,+BAAOL,EAAKd,OACZ,wBAAQoB,QAAS,kBAnCfC,EAmC0BP,EAAKd,UAlCzCG,GAAoB,WAChB,OACID,EAAiBoB,KAAI,SAACR,GAClB,OACIA,EAAKd,OAAOqB,EAAM,CACdrB,KAAKqB,EACLV,aAAY,GACfG,QARR,IAACO,GAmCF,kBACA,wBAAQD,QAAS,kBApBhB,SAACN,GACVD,EAASC,GACTb,EAAQa,EAAKd,MACbO,GAAa,GACbF,GAAY,GAgBiBkB,CAAOT,IAAOU,MAAO,CAACC,QAAQnB,EAAU,OAAO,SAApE,kBACA,wBAAQc,QAAS,kBAAIP,EAASC,IAA9B,wBA8BZ,OACI,qBAAKK,UAAU,OAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,SAAf,+BAGA,sBAAKA,UAAU,SAAf,UACI,uBACIO,YAAY,uBACZC,SAAW,SAACC,GACR3B,EAAQ2B,EAAEC,OAAOR,OACjBO,EAAEC,OAAOR,MAAMS,OAAO,EAAEzB,GAAY,GAAMA,GAAY,IAG1DgB,MAAOrB,EACP+B,UAAW,SAACC,GACR,GAAkB,UAAdA,EAAMC,IACL,OAAOjC,EAAK8B,OAAO,GAAKtB,OAKpCF,EAAU,wBAAQkB,MAAO,CAACC,QAAQrB,EAAS,QAAQ,QAAQgB,QAASZ,EAA1D,oBACV,wBAAQgB,MAAO,CAACC,QAAQrB,EAAS,QAAQ,QAAQgB,QAASZ,EAA1D,uBAGJN,EAAiBoB,KAAI,SAAAR,GAClB,OAAQA,EAAKH,aApDTU,EAoDuDP,EAlDnE,sBAAKK,UAAU,eAAf,UACI,+BAAOE,EAAMrB,OACb,wBAAQoB,QAAS,WACbjB,GAAoB,WAChB,OACID,EAAiBoB,KAAI,SAACR,GAClB,OACIA,EAAKd,OAAOqB,EAAMrB,KAAK,CACnBA,KAAKqB,EAAMrB,KACXW,aAAY,GACfG,SARrB,kBAgBA,wBAAQM,QAAS,kBAAIP,EAASQ,IAA9B,wBAgC6BH,EAAeJ,GApDrC,IAACO,WCvDTa,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCISgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.39c20b77.chunk.js","sourcesContent":["import React, {useState} from \"react\"\r\nimport \"./Todo.css\";\r\n\r\nconst Todo=()=>{\r\n    const [text, setText]= useState(\"\")\r\n    //const [completedTodos, setCompletedTodos]= useState([])\r\n    const [inCompletedTodos, setInCompletedTodos]= useState([])\r\n    const [isTyping, setIsTyping]= useState(false) \r\n    const [isEditing, setIsEditing]= useState(false)\r\n\r\n\r\n    const onSubmit=()=>{\r\n        let list=[...inCompletedTodos]\r\n        let newTodo={\r\n            text:text,\r\n            isCompleted:false\r\n        }\r\n        \r\n        list.push(newTodo)\r\n        setInCompletedTodos(list)\r\n        setText(\"\")\r\n        setIsTyping(false)\r\n        setIsEditing(false)\r\n        \r\n    }\r\n\r\n    const onDone=(value)=>{\r\n        setInCompletedTodos(()=>{\r\n            return(\r\n                inCompletedTodos.map((todo)=>{\r\n                    return(\r\n                        todo.text===value?{\r\n                            text:value, \r\n                            isCompleted:true}\r\n                        :todo\r\n                    )\r\n                })\r\n            )\r\n        }) \r\n    }\r\n    \r\n\r\n    const onEdit=(todo)=>{\r\n        onDelete(todo)\r\n        setText(todo.text)\r\n        setIsEditing(true)\r\n        setIsTyping(true)\r\n    }\r\n    const onDelete=(todo)=>{\r\n        let list=[...inCompletedTodos]\r\n        const index = list.indexOf(todo);\r\n        if (index > -1) {\r\n            list.splice(index, 1);\r\n        }\r\n        setInCompletedTodos(list)\r\n    }\r\n\r\n    const inCompleteTodo=(todo)=>{\r\n        return(\r\n            <div className=\"incompleteList\">\r\n                <span>{todo.text}</span>\r\n                <button onClick={()=>onDone(todo.text)}>Done</button>\r\n                <button onClick={()=>onEdit(todo)} style={{display:isEditing?\"none\":\"block\"}}>Edit</button>\r\n                <button onClick={()=>onDelete(todo)}>Delete</button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n    const completeTodo=(value)=>{\r\n        return(\r\n            <div className=\"completeList\">\r\n                <span>{value.text}</span>\r\n                <button onClick={()=>{\r\n                    setInCompletedTodos(()=>{\r\n                        return(\r\n                            inCompletedTodos.map((todo)=>{\r\n                                return(\r\n                                    todo.text===value.text?{\r\n                                        text:value.text, \r\n                                        isCompleted:false}\r\n                                    :todo\r\n                                    \r\n                                )\r\n                                \r\n                            })\r\n                        )\r\n                    }) \r\n                }}>Undo</button>\r\n                <button onClick={()=>onDelete(value)}>Delete</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"main\">\r\n            <div className=\"todo\">\r\n                <div className=\"header\">\r\n                    Todos Application\r\n                </div>\r\n                <div className=\"topBar\">\r\n                    <input\r\n                        placeholder=\"What you want to do?\"\r\n                        onChange={ (e)=>{\r\n                            setText(e.target.value)\r\n                            e.target.value.length>0?setIsTyping(true):setIsTyping(false)\r\n                        }\r\n                        }\r\n                        value={text}\r\n                        onKeyDown={(event)=>{\r\n                            if (event.key === 'Enter') {\r\n                                 return text.length>0 && onSubmit()\r\n                              }\r\n                        }}\r\n                    />\r\n                    \r\n                    {isEditing?<button style={{display:isTyping?\"block\":\"none\"}}onClick={onSubmit}>Update</button>\r\n                    :<button style={{display:isTyping?\"block\":\"none\"}}onClick={onSubmit}>Create</button>}\r\n                    \r\n                </div>\r\n                {inCompletedTodos.map(todo=>{\r\n                    return(!todo.isCompleted?inCompleteTodo(todo):completeTodo(todo))\r\n                    \r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n    \r\n\r\nexport default Todo","import './App.css';\nimport React from \"react\"\n// import Tictac from \"./Tictac\"\nimport Todo from \"./Todo\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}